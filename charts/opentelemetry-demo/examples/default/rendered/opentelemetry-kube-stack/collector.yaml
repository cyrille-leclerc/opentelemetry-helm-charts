---
# Source: opentelemetry-demo/charts/opentelemetry-kube-stack/templates/collector.yaml
apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: otel-demo-daemon
  namespace: default
  labels:
    helm.sh/chart: opentelemetry-kube-stack-0.11.0
    app.kubernetes.io/version: "0.129.1"
    app.kubernetes.io/managed-by: Helm
    release: "example"
spec:
  managementState: managed
  mode: daemonset
  config:
    connectors:
      spanmetrics: {}
    exporters:
      debug: {}
      opensearch:
        http:
          endpoint: http://opensearch:9200
          tls:
            insecure: true
        logs_index: otel-logs
        logs_index_time_format: yyyy-MM-dd
      otlp/jaeger:
        endpoint: http://jaeger-collector:4317
        tls:
          insecure: true
      otlphttp/prometheus:
        endpoint: http://prometheus:9090/api/v1/otlp
        tls:
          insecure: true
    extensions:
      health_check:
        endpoint: 0.0.0.0:13133
      k8s_leader_elector/k8s_cluster:
        auth_type: serviceAccount
        lease_name: k8s.cluster.receiver.opentelemetry.io
        lease_namespace: default
      k8s_leader_elector/k8s_objects:
        auth_type: serviceAccount
        lease_name: k8s.objects.receiver.opentelemetry.io
        lease_namespace: default
    processors:
      batch:
        send_batch_max_size: 1500
        send_batch_size: 1000
        timeout: 1s
      k8sattributes:
        extract:
          labels:
          - from: pod
            key: app.kubernetes.io/instance
            tag_name: k8s.app.instance
          - from: pod
            key: app.kubernetes.io/component
            tag_name: k8s.app.component
          metadata:
          - k8s.namespace.name
          - k8s.pod.name
          - k8s.pod.uid
          - k8s.node.name
          - k8s.pod.start_time
          - k8s.deployment.name
          - k8s.replicaset.name
          - k8s.replicaset.uid
          - k8s.daemonset.name
          - k8s.daemonset.uid
          - k8s.job.name
          - k8s.job.uid
          - k8s.container.name
          - k8s.cronjob.name
          - k8s.statefulset.name
          - k8s.statefulset.uid
          - container.image.tag
          - container.image.name
          - k8s.cluster.uid
          - service.namespace
          - service.name
          - service.version
          - service.instance.id
          otel_annotations: true
        filter:
          node_from_env_var: OTEL_K8S_NODE_NAME
        passthrough: false
        pod_association:
        - sources:
          - from: resource_attribute
            name: k8s.pod.uid
        - sources:
          - from: resource_attribute
            name: k8s.pod.name
          - from: resource_attribute
            name: k8s.namespace.name
          - from: resource_attribute
            name: k8s.node.name
        - sources:
          - from: resource_attribute
            name: k8s.pod.ip
        - sources:
          - from: resource_attribute
            name: k8s.pod.name
          - from: resource_attribute
            name: k8s.namespace.name
        - sources:
          - from: connection
      resourcedetection/env:
        detectors:
        - env
        - k8snode
        override: false
        timeout: 2s
      transform/fix_nextjs_span_name:
        error_mode: ignore
        trace_statements:
        - context: span
          statements:
          - replace_pattern(name, "\\?.*", "")
          - replace_match(name, "GET /api/products/*", "GET /api/products/{productId}")
      transform/set-hostname:
        error_mode: ignore
        log_statements:
        - set(resource.attributes["host.name"], resource.attributes["k8s.node.name"])
          when resource.attributes["host.name"] == null
        metric_statements:
        - set(resource.attributes["host.name"], resource.attributes["k8s.node.name"])
          when resource.attributes["host.name"] == null
        trace_statements:
        - set(resource.attributes["host.name"], resource.attributes["k8s.node.name"])
          when resource.attributes["host.name"] == null
    receivers:
      filelog:
        exclude: []
        include:
        - /var/log/pods/*/*/*.log
        include_file_name: false
        include_file_path: true
        operators:
        - id: container-parser
          max_log_size: 102400
          type: container
        retry_on_failure:
          enabled: true
        start_at: end
      hostmetrics:
        collection_interval: 10s
        root_path: /hostfs
        scrapers:
          cpu:
            metrics:
              system.cpu.utilization:
                enabled: true
          disk: {}
          filesystem:
            exclude_fs_types:
              fs_types:
              - autofs
              - binfmt_misc
              - bpf
              - cgroup2
              - configfs
              - debugfs
              - devpts
              - devtmpfs
              - fusectl
              - hugetlbfs
              - iso9660
              - mqueue
              - nsfs
              - overlay
              - proc
              - procfs
              - pstore
              - rpc_pipefs
              - securityfs
              - selinuxfs
              - squashfs
              - sysfs
              - tracefs
              match_type: strict
            exclude_mount_points:
              match_type: regexp
              mount_points:
              - /dev/*
              - /proc/*
              - /sys/*
              - /run/k3s/containerd/*
              - /var/lib/docker/*
              - /var/lib/kubelet/*
              - /snap/*
            metrics:
              system.filesystem.utilization:
                enabled: true
          load: {}
          memory:
            metrics:
              system.memory.utilization:
                enabled: true
          network: {}
      httpcheck/frontend-proxy:
        targets:
        - endpoint: http://frontend-proxy:8080
      k8s_cluster:
        allocatable_types_to_report:
        - cpu
        - memory
        - storage
        auth_type: serviceAccount
        collection_interval: 10s
        k8s_leader_elector: k8s_leader_elector/k8s_cluster
        node_conditions_to_report:
        - Ready
        - MemoryPressure
        - DiskPressure
        - NetworkUnavailable
      k8sobjects:
        k8s_leader_elector: k8s_leader_elector/k8s_objects
        objects:
        - exclude_watch_type:
          - DELETED
          group: events.k8s.io
          mode: watch
          name: events
      kubeletstats:
        auth_type: serviceAccount
        collection_interval: 15s
        endpoint: https://${env:OTEL_K8S_NODE_IP}:10250
        extra_metadata_labels:
        - container.id
        - k8s.volume.type
        insecure_skip_verify: true
        k8s_api_config:
          auth_type: serviceAccount
        metric_groups:
        - node
        - pod
        - volume
        - container
        metrics:
          container.cpu.usage:
            enabled: true
          k8s.node.cpu.usage:
            enabled: true
          k8s.node.uptime:
            enabled: true
          k8s.pod.cpu.usage:
            enabled: true
          k8s.pod.uptime:
            enabled: true
      nginx:
        collection_interval: 10s
        endpoint: http://image-provider:8081/status
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            cors:
              allowed_origins:
              - http://*
              - https://*
            endpoint: 0.0.0.0:4318
      postgresql:
        endpoint: postgresql:5432
        metrics:
          postgresql.blks_hit:
            enabled: true
          postgresql.blks_read:
            enabled: true
          postgresql.deadlocks:
            enabled: true
          postgresql.tup_deleted:
            enabled: true
          postgresql.tup_fetched:
            enabled: true
          postgresql.tup_inserted:
            enabled: true
          postgresql.tup_returned:
            enabled: true
          postgresql.tup_updated:
            enabled: true
        password: otel
        tls:
          insecure: true
        username: root
      redis:
        collection_interval: 10s
        endpoint: valkey-cart:6379
        username: valkey
    service:
      extensions:
      - health_check
      - k8s_leader_elector/k8s_objects
      - k8s_leader_elector/k8s_cluster
      pipelines:
        logs:
          exporters:
          - opensearch
          processors:
          - k8sattributes
          - resourcedetection/env
          - transform/set-hostname
          - batch
          receivers:
          - otlp
          - filelog
          - k8sobjects
        metrics:
          exporters:
          - otlphttp/prometheus
          processors:
          - k8sattributes
          - resourcedetection/env
          - transform/set-hostname
          - batch
          receivers:
          - otlp
          - httpcheck/frontend-proxy
          - nginx
          - postgresql
          - redis
          - spanmetrics
          - hostmetrics
          - kubeletstats
          - k8s_cluster
        traces:
          exporters:
          - otlp/jaeger
          - spanmetrics
          processors:
          - k8sattributes
          - resourcedetection/env
          - transform/set-hostname
          - transform/fix_nextjs_span_name
          - batch
          receivers:
          - otlp
      telemetry:
        logs:
          level: info
        metrics:
          readers:
          - pull:
              exporter:
                prometheus:
                  host: 0.0.0.0
                  port: 8888
  image: "otel/opentelemetry-collector-contrib:0.134.1"
  imagePullPolicy: IfNotPresent
  upgradeStrategy: automatic
  terminationGracePeriodSeconds: 30
  resources:
    limits:
      cpu: 200m
      memory: 500Mi
    requests:
      cpu: 100m
      memory: 250Mi
  securityContext:
    runAsGroup: 0
    runAsUser: 0
  targetAllocator:
    enabled: false
  volumeMounts:
  - name: varlogpods
    mountPath: /var/log/pods
    readOnly: true
  - name: varlibdockercontainers
    mountPath: /var/lib/docker/containers
    readOnly: true
  - name: hostfs
    mountPath: /hostfs
    readOnly: true
    mountPropagation: HostToContainer
  env:
  - name: OTEL_K8S_NODE_NAME
    valueFrom:
      fieldRef:
        fieldPath: spec.nodeName
  - name: OTEL_K8S_NODE_IP
    valueFrom:
      fieldRef:
        fieldPath: status.hostIP
  - name: OTEL_K8S_NAMESPACE
    valueFrom:
      fieldRef:
        apiVersion: v1
        fieldPath: metadata.namespace
  - name: OTEL_K8S_POD_NAME
    valueFrom:
      fieldRef:
        apiVersion: v1
        fieldPath: metadata.name
  - name: OTEL_K8S_POD_IP
    valueFrom:
      fieldRef:
        apiVersion: v1
        fieldPath: status.podIP
  - name: OTEL_RESOURCE_ATTRIBUTES
    value: "k8s.cluster.name=otel-demo-stack"

  volumes:
  - name: varlogpods
    hostPath:
      path: /var/log/pods
  - name: varlibdockercontainers
    hostPath:
      path: /var/lib/docker/containers
  - name: hostfs
    hostPath:
      path: /
